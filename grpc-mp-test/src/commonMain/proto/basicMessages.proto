syntax = "proto3";

package io.github.timortel.kotlin_multiplatform_grpc_plugin.test.basic_messages;

option java_multiple_files = true;

message SimpleMessage {
  string field1 = 1;
}

message ScalarTypes {
  string field1 = 1;
  bool field2 = 2;
  int32 field3 = 3;
  int64 field4 = 4;
  float field5 = 5;
  double field6 = 6;
}

message SimpleRepeatedMessage {
  repeated string field1 = 1;
}

message ComplexRepeatedMessage {
  repeated string field1 = 1;
  repeated bool field2 = 2;
  repeated int32 field3 = 3;
  repeated int64 field4 = 4;
  repeated float field5 = 5;
  repeated double field6 = 6;
}

message MessageWithSubMessage {
  SimpleMessage field1 = 1;
}

message MessageWithRepeatedSubMessage {
  repeated SimpleMessage field1 = 1;
}

enum SimpleEnum {
  ZERO = 0;
  ONE = 1;
  TWO = 2;
}

message MessageWithEnum {
  SimpleEnum field1 = 1;
}

message MessageWithRepeatedEnum {
  repeated SimpleEnum field1 = 1;
}

message MessageWithNestedMessage {
  NestedMessage field1 = 1;

  message NestedMessage {
    int32 field1 = 1;
  }
}

message MessageWithMap {
  map<string, int32> field1 = 1;
}

message MessageWithMessageMap {
  map<int32, SimpleMessage> field1 = 1;
}

message MessageWithEnumMap {
  map<int32, SimpleEnum> field1 = 1;
}

message MessageWithEverything {
  string field1 = 1;
  bool field2 = 2;
  int32 field3 = 3;
  int64 field4 = 4;
  float field5 = 5;
  double field6 = 6;
  SimpleEnum field7 = 7;
  SimpleMessage field8 = 8;

  repeated string field9 = 9;
  repeated bool field10 = 10;
  repeated int32 field11 = 11;
  repeated int64 field12 = 12;
  repeated float field13 = 13;
  repeated double field14 = 14;
  repeated SimpleEnum field15 = 15;

  map<string, int32> field16 = 16;
  map<int32, SimpleMessage> field17 = 17;
  map<int32, SimpleEnum> field18 = 18;
}

message LongMessage {
  int64 field1 = 1;
}

message RepeatedLongMessage {
  repeated int64 field1 = 1;
}

message OneOfMessage {
  oneof oneOf1 {
    int32 field1 = 1;
    string field2 = 2;
    LongMessage field3 = 3;
  }
}

service TestService {
  rpc testRpc (SimpleMessage) returns (SimpleRepeatedMessage);
}